# Os codigos de status podem ser encontrados em: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml

# O OpenAPI pode ser representado em nos formatos JSON ou YAML

# Todos os nomes de campos sao case sensitive.

# Formatos definidos pelo OAS:
#   type    |   format  | 
#-----------|-----------|---------------
#   integer | int32     | signed 32 bits
#   integer | int64     | signed 64 bits (a.k.a. long)
#   number  | float     | 
#   number  | double    | 
#   string  |           | 
#   string  | byte      | base64 encoded characters
#   string  | binary    | any sequence of octets
#   boolean |           | 
#   string  | date      | As defined by full-date*
#   string  | date-time | As defined by date-time*
#   string  | password  | A hint to UIs to obscure input
# *https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14

# Para a versao 3.X, existe um campo OBRIGATORIO chamado openapi e o valor dele corresponde com a versao do OAS em uso.
# Para a versao 2.X, existe um campo OBRIGATORIO chamado swagger que possui valor ['2.0']

openapi: 3.0.0

# O objeto OpenAPI possui os seguintes campos:
# openapi - string - OBRIGATORIO
# info - Info Object - OBRIGATORIO
# servers - Server Object 
# paths - Paths Object - OBRIGATORIO
# components - Components Object
# security - Security Requirement Object
# tags - Tag Object
# externalDocs - External Documentation Object

#-----------------------------------------------

# Info Object
info:
# Define metadatas sobre a API

  title: 'Resumao do Swagger'
  # Define o titulo da API
  # String
  # OBRIGATORIO
  
  description: 'Resumo da estrutura do Swagger para estudo'
  # Uma breve descricao sobre a API
  # String
  
  termsOfService: 'www.termsofservice.com'
  # Uma URL para os Termos de Servico da API
  # String
  
  contact:
  # Contact Object - Informacoes de contato
  # Os 3 campos abaixo sao strings
    name: 'Andre Tanaka'
    url: 'andretanaka.com.br'
    email: 'andre@tanaka.com.br'
    
  license:
  # Licence Object - Informacoes da licenca
    name: 'Apache 2.0'
    # String
    # OBRIGATORIO
    
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    # String
    
  version: "1.0.0"
  # Versao do documento OpenAPI, que eh diferente da versao da API implementada ou da versao do OAS usado.
  # String
  # OBRIGATORIO

#-----------------------------------------------

# Server Object
# Deve ser um array
servers:
# Added by API Auto Mocking Plugin
  - url: 'https://virtserver.swaggerhub.com/AndreTanaka/Estudos/1.0.0'
    # URL para o host
    # String
    # OBRIGATORIO
    
    description: 'SwaggerHub API Auto Mocking'
    # Breve descricao do host
    # String
    
    variables:
    # Um mapa entre as variaveis e seus valores. Os valores sao usados para substituicao no URL template do servidor.
    # As variaveis podem possuir os seguintes campos:
    # default - String -  OBRIGATORIO
    # enum - Array de strings
    # description - String
      loginTypes:
        default: 'email'
        enum:
          - 'Facebook'
          - 'Gmail'
          - 'Linkedin'
          - 'Github'
        description: 'Define o tipo de login'
      port:
        default: '1234'
        enum:
          - '2345'
          - '3456'
        description: 'Define por qual porta o usuario vai acessar o site'
        
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
    
# Paths Object
# Define os caminhos relativos para os endpoints individuais e suas operacoes. Esse caminho eh concatenado a URL do Server Object para assim construir a URL completa.
# O nome do campo deve comecar com /. Assim o padrao ficaria /{nome}.
# Um path pode ter as seguintes operacoes e NUNCA deve ter mais de uma operacao IGUAL para o mesmo path:
# GET - Obtem dados de um recurso. Exemplo: Listar contatos, exibir a informacao de um cliente especifico, etc.
# POST - Cria um novo recurso. Exemplo: Cadastrar um cliente.
# PUT - Substitui dados de um determinado recurso. Exemplo: Alterar a data de nascimento e telefone de um determinado cliente.
# PATCH - Atualiza parcialmente um determinado recurso. Exemplo: Mudar a foto de perfil.
# DELETE - Exclui um determinado recurso. Exemplo: Deletar um comentario.
# HEAD - Similar ao GET, mas utilizado apenas para se obter os cabecalhos de resposta, sem os dados em si.
# OPTIONS - Obter quais manipulacoes podem ser realizadas em um determinado recurso.
# TRACE - ???
paths:
  /inventory:
    get:
      tags:
        - developers
        # Lista de tags para o controle de documentacao. As tags podem ser usadas para o agrupamento logico das operacoes por recurso ou outro qualificador.
        # Array de strings
        
      summary: searches inventory
      # Um breve sumario sobre o que a operacao faz.
      # String
      
      description: 'By passing in the appropriate options, you can search for
        available inventory in the system'
      # Uma explicacao sobre o comportamento da operacao.
      # String
      
      operationId: searchInventory
      # Uma string unica usada para identificar a operacao. Essa id DEVE ser UNICA entre todas as operacoes descritas na API.
      # String
      
      # Lista de parametros que sao aplicadas na operacao
      parameters:
        - in: query
          # Os parametros podem ser passados por 4 meios:
          # path: O parametro eh parte da URL. Exemplo: /cliente/{clienteId}
          # query: O parametro eh concatenado a URL. Exemplo: /items?id=###
          # header: Headers customizaveis que sao esperados como parte do request
          # cookie: Usado para passar o valor de um cookie especifico para a API
          # String
          # OBRIGATORIO
          
          name: searchString
          # Se o parametro in eh igual a [path], entao o campo name DEVE corresponder a parte do caminho associado.
          # Se o parametro in eh igual a [header], entao o campo name DEVE ser "Accept", "Content-Type" OU "Authorization".
          # Para todos os outros casos, o campo name corresponde ao parametro name usado na propriedade in.
          # String
          # OBRIGATORIO
          
          description: pass an optional search string for looking up inventory
          # Uma breve descricao do parametro
          # String
          
          required: false
          # Determina se o parametro eh mandatorio ou nao.
          # Boolean
          # OBRIGATORIO
          
          # deprecated: false
          # Determina se um parametro esta depreciado e deve ser atualizado para fora de uso.
          # Boolean
          
          # allowEmptyValue: false
          # Determina se o parametro pode ser passado como vazio. Essa opcao eh valida somente para parametros do tipo query. O valor padrao dessa opcao eh falso. O uso nao eh recomendado.
          # Boolean
          
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
        description: Inventory item to add
        
components:
  schemas:
    InventoryItem:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        releaseDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
    Manufacturer:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: 'https://www.acme-corp.com'
        phone:
          type: string
          example: 408-867-5309
      type: object
      
# Perguntas
# Qual a diferenca entre uma variavel do Server Object e uma parametro passado pelo path?
# Quando usar a operacao TRACE?
# Na documentacao, os paramentos estao no mesmo nivel que as operacoes. Os parametros nao deveriam estar um nivel abaixo das operacoes?